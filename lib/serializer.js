/**
 * @fileoverview
 * @author Taketoshi Aono
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var ProcessingType;
(function (ProcessingType) {
    ProcessingType[ProcessingType["TEXT"] = 0] = "TEXT";
    ProcessingType[ProcessingType["ARRAY_BUFFER"] = 1] = "ARRAY_BUFFER";
})(ProcessingType = exports.ProcessingType || (exports.ProcessingType = {}));
var TraversalState;
(function (TraversalState) {
    TraversalState[TraversalState["OBJECT_ROOT"] = 1] = "OBJECT_ROOT";
    TraversalState[TraversalState["OBJECT_PROPERTY_START"] = 2] = "OBJECT_PROPERTY_START";
    TraversalState[TraversalState["OBJECT_PROPERTY_END"] = 3] = "OBJECT_PROPERTY_END";
    TraversalState[TraversalState["ARRAY_ROOT"] = 4] = "ARRAY_ROOT";
    TraversalState[TraversalState["ARRAY_ELEMENT_START"] = 5] = "ARRAY_ELEMENT_START";
    TraversalState[TraversalState["ARRAY_ELEMENT_END"] = 6] = "ARRAY_ELEMENT_END";
    TraversalState[TraversalState["ROOT"] = 7] = "ROOT";
})(TraversalState || (TraversalState = {}));
var ContextState;
(function (ContextState) {
    ContextState[ContextState["OBJECT_PREPARE"] = 1] = "OBJECT_PREPARE";
    ContextState[ContextState["OBJECT_PROPERTY_ENUMERATION"] = 2] = "OBJECT_PROPERTY_ENUMERATION";
    ContextState[ContextState["ARRAY"] = 3] = "ARRAY";
    ContextState[ContextState["ORDINAL"] = 4] = "ORDINAL";
})(ContextState || (ContextState = {}));
var StackFrame = (function () {
    function StackFrame() {
        this.vp = [];
        this.cp = [];
        this.csp = [];
        this.ip = [];
        this.ip.push(TraversalState.OBJECT_ROOT);
    }
    StackFrame.prototype.pushIP = function (state) {
        this.ip.push(state);
    };
    StackFrame.prototype.popIP = function () {
        return this.ip.pop();
    };
    StackFrame.prototype.peekIP = function () { return this.ip[this.ip.length - 1]; };
    StackFrame.prototype.pushCP = function (value) {
        this.cp.push(value);
    };
    StackFrame.prototype.popCP = function () {
        return this.cp.pop();
    };
    StackFrame.prototype.peekCP = function () { return this.cp[this.cp.length - 1]; };
    StackFrame.prototype.pushCSP = function (value) {
        this.csp.push(value);
    };
    StackFrame.prototype.popCSP = function () {
        return this.csp.pop();
    };
    StackFrame.prototype.peekCSP = function () { return this.csp[this.csp.length - 1]; };
    StackFrame.prototype.exchangeCSP = function (state) {
        var last = this.csp.pop();
        this.csp.push(state);
        return last;
    };
    StackFrame.prototype.exchangeIP = function (state) {
        var ret = this.ip.pop();
        this.ip.push(state);
        return ret;
    };
    StackFrame.prototype.pushVP = function (value) {
        this.vp.push(value);
    };
    StackFrame.prototype.popVP = function () {
        return this.vp.pop();
    };
    StackFrame.prototype.peekVP = function () { return this.vp[this.vp.length - 1]; };
    StackFrame.prototype.exchangeVP = function (value) {
        var ret = this.vp.pop();
        this.vp.push(value);
        return ret;
    };
    Object.defineProperty(StackFrame.prototype, "ipLength", {
        get: function () { return this.ip.length; },
        enumerable: true,
        configurable: true
    });
    return StackFrame;
}());
var ObjectKeyDescriptorGetter = (function () {
    function ObjectKeyDescriptorGetter() {
    }
    ObjectKeyDescriptorGetter.getDescriptors = function (obj) {
        var proto = obj;
        var descriptors = [];
        while (proto) {
            var names = Object.getOwnPropertyNames(proto);
            for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
                var name_1 = names_1[_i];
                var descriptor = Object.getOwnPropertyDescriptor(proto, name_1);
                if (!this.isBuiltin(name_1, descriptor)) {
                    descriptors.push({ name: name_1, descriptor: descriptor });
                }
            }
            proto = Object.getPrototypeOf(proto);
        }
        return descriptors;
    };
    ObjectKeyDescriptorGetter.isBuiltin = function (key, _a) {
        var value = _a.value;
        return key === '__proto__' || (key in Object.prototype && Object.prototype[key] === value);
    };
    return ObjectKeyDescriptorGetter;
}());
var StateSentinel = (function () {
    function StateSentinel() {
    }
    return StateSentinel;
}());
/**
 * Traverse Object
 * Format:
 * {
 *   type: string // type name,
 *   value?: any // value,
 *   descriptors: {
 *     name: {
 *       configurable: boolean;
 *       enumerable: boolean;
 *       writable?: boolean;
 *       value?: any;
 *       get?: any;
 *       set?: any
 *     },
 *     ...
 *   }
 * }
 */
var ObjectTraversal = (function () {
    function ObjectTraversal() {
        this.stateSentinel = new StateSentinel();
        this.stack = new StackFrame();
    }
    ObjectTraversal.prototype.traverse = function (obj) {
        this.stack.pushVP(obj);
        while (this.stack.ipLength) {
            console.log(this.stack);
            switch (this.stack.popIP()) {
                case TraversalState.OBJECT_ROOT: {
                    this.handleRootState(this.stack.peekVP());
                    break;
                }
                case TraversalState.OBJECT_PROPERTY_START: {
                    var ret = this.handleObjectProperty();
                    if (ret.state) {
                        this.stack.pushIP(ret.state);
                    }
                    if (ret.value) {
                        this.stack.pushVP(ret.value);
                    }
                    break;
                }
                case TraversalState.OBJECT_PROPERTY_END: {
                    this.stack.popCSP();
                    this.stack.popCP();
                    var ret = [];
                    var sp = this.stack.popVP();
                    while (1) {
                        ret.push(sp);
                        sp = this.stack.popVP();
                        if (sp === this.stateSentinel) {
                            var result = "{\n              \"type\": \"object\",\n              \"descriptors\": {\n                " + ret.join(',\n') + "\n              }\n            }";
                            if (this.stack.peekCSP() === ContextState.OBJECT_PROPERTY_ENUMERATION) {
                                var name_2 = this.stack.peekCP().descriptorInfo.name;
                                this.stack.pushVP(null);
                                this.handlePrimitiveSerialization(result, function (v) { return v; });
                                result = this.stack.popVP();
                            }
                            this.stack.pushVP(result);
                            break;
                        }
                    }
                    break;
                }
                case TraversalState.ARRAY_ELEMENT_START: {
                    var array = this.stack.peekCP();
                    if (array.length) {
                        var element = array.pop();
                        this.stack.pushIP(TraversalState.ARRAY_ELEMENT_START);
                        this.stack.pushVP(element);
                        this.stack.pushIP(TraversalState.OBJECT_ROOT);
                    }
                    else {
                        this.stack.pushIP(TraversalState.ARRAY_ELEMENT_END);
                    }
                    break;
                }
                case TraversalState.ARRAY_ELEMENT_END: {
                    this.stack.popCP();
                    this.stack.popCSP();
                    var ret = [];
                    var sp = this.stack.popVP();
                    while (1) {
                        if (sp === this.stateSentinel) {
                            var value = void 0;
                            if (this.stack.peekCSP() === ContextState.OBJECT_PROPERTY_ENUMERATION) {
                                var name_3 = this.stack.peekCP().descriptorInfo.name;
                                this.stack.pushVP(null);
                                this.handlePrimitiveSerialization("[" + ret.join(',') + "]", function (v) { return v; });
                                value = this.stack.popVP();
                            }
                            else {
                                value = "[" + ret.join(',') + "]";
                            }
                            this.stack.pushVP(value);
                            break;
                        }
                        else {
                            ret.push(sp);
                        }
                        sp = this.stack.popVP();
                    }
                    break;
                }
            }
        }
        return this.stack.popVP();
    };
    ObjectTraversal.prototype.handleRootState = function (obj) {
        var _this = this;
        var type = utils_1.Reflect.className(obj);
        switch (type) {
            case 'object':
                var descriptors = ObjectKeyDescriptorGetter.getDescriptors(obj);
                this.stack.pushIP(TraversalState.OBJECT_PROPERTY_START);
                this.stack.exchangeVP(this.stateSentinel);
                this.stack.pushCP({ descriptors: descriptors, object: obj });
                this.stack.pushCSP(ContextState.OBJECT_PREPARE);
                break;
            case 'array':
                this.stack.exchangeVP(this.stateSentinel);
                this.stack.pushIP(TraversalState.ARRAY_ELEMENT_START);
                this.stack.pushCP(obj);
                this.stack.pushCSP(ContextState.ARRAY);
                break;
            case 'function':
                this.handlePrimitiveSerialization(obj, function (o) { return _this.serializeFunction(o); });
                break;
            case 'regexp':
                this.handlePrimitiveSerialization(obj, function (o) { return _this.serializeRegexp(o); });
                break;
            case 'string':
                this.handlePrimitiveSerialization(obj, function (o) { return "${o}"; });
                break;
            case 'number':
            case 'boolean':
                this.handlePrimitiveSerialization(obj, function (o) { return o; });
                break;
            default:
        }
    };
    ObjectTraversal.prototype.handleObjectProperty = function () {
        var descriptorInfo;
        if (this.stack.peekCSP() !== ContextState.OBJECT_PROPERTY_ENUMERATION) {
            var cp = this.stack.popCP();
            descriptorInfo = cp.descriptors.pop();
            this.stack.pushCP({ descriptorInfo: descriptorInfo, keyDescriptors: cp });
            this.stack.exchangeCSP(ContextState.OBJECT_PROPERTY_ENUMERATION);
        }
        else {
            var keyDescriptors = this.stack.popCP().keyDescriptors;
            descriptorInfo = keyDescriptors.descriptors.pop();
            this.stack.pushCP({ descriptorInfo: descriptorInfo, keyDescriptors: keyDescriptors });
        }
        if (descriptorInfo && descriptorInfo.descriptor) {
            this.stack.pushIP(TraversalState.OBJECT_PROPERTY_START);
            if (descriptorInfo.descriptor.value) {
                return { value: descriptorInfo.descriptor.value, state: TraversalState.OBJECT_ROOT };
            }
            return {
                value: "\"" + descriptorInfo.name + "\": {\n          \"configurable\": " + descriptorInfo.descriptor.configurable + ",\n          \"enumerable\": " + descriptorInfo.descriptor.enumerable + ",\n          \"set\": " + this.serializeFunction(descriptorInfo.descriptor.set) + ",\n          \"get\": " + this.serializeFunction(descriptorInfo.descriptor.get) + "\n        }",
                state: null
            };
        }
        return { value: null, state: TraversalState.OBJECT_PROPERTY_END };
    };
    ObjectTraversal.prototype.serializeFunction = function (fn) {
        if (fn) {
            var str = Function.prototype.toString.call(fn).replace(/\n\s/g, '');
            if (/^function(){[native code]}$/.test(str)) {
                return 'function() {throw new Error("Native function or bound function can\'t serialize.")}';
            }
            return "\"" + str + "\"";
        }
        return null;
    };
    ObjectTraversal.prototype.serializeRegexp = function (regexp) {
        return "{\"type\":\"regexp\", \"value\": \"/" + regexp.source + "/" + regexp.flags + "\"}";
    };
    /**
     * Serialize primitive values.
     * RETURN last vp
     */
    ObjectTraversal.prototype.handlePrimitiveSerialization = function (obj, serialize) {
        switch (this.stack.peekCSP()) {
            case ContextState.OBJECT_PROPERTY_ENUMERATION: {
                var descriptorInfo = this.stack.peekCP().descriptorInfo;
                var ret = ("\"" + descriptorInfo.name + "\": {\n        \"configurable\": " + descriptorInfo.descriptor.configurable + ",\n        \"enumerable\": " + descriptorInfo.descriptor.enumerable + ",\n        \"writable\": " + descriptorInfo.descriptor.writable + ",\n        \"value\": " + serialize(obj) + "\n      }").replace(/\s/g, '');
                this.stack.exchangeVP(ret);
                break;
            }
            case ContextState.ARRAY:
            case ContextState.ORDINAL: {
                this.stack.exchangeVP(serialize(obj));
                break;
            }
        }
    };
    return ObjectTraversal;
}());
exports.ObjectTraversal = ObjectTraversal;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
